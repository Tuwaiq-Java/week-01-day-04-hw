package p1;

abstract public class Animal {
    private String name;


    public Animal(String name) {
        this.name = name;
    }
    public abstract void greets();
    
}}

package p1;

public class Cat  extends Animal{
    public Cat(String name) {
        super(name);
    }

    @Override
    public void greets() {
        System.out.println("Meow");

    }

 }


package p1;

public class Dog  extends Animal{
    public Dog(String name) {
        super(name);
    }

    @Override
    public void greets() {
        System.out.println("Woof");

    }
    public void greets(Dog another) {
System.out.println("Woooof");
    }}




package p1;

public class BigDog extends Dog {
    public BigDog(String name) {
        super(name);
    }

    @Override
    public void greets() {
        System.out.println("wooow");
    }

    @Override
    public void greets(Dog another) {
        System.out.println("wooooooow");
    }

    public void greets(BigDog another) {
        System.out.println("wooooooooooooooow");
    }
}



package p1;

//main to test 4 class
public class Test_animal {
    public static void main(String[] args) {

Cat c1=new Cat("louk");
c1.greets();
Dog d1=new Dog("jason");
d1.greets();
d1.greets(d1);
BigDog b1=new BigDog("loly");
b1.greets();
b1.greets();
b1.greets();

    }
}


package p1;

public interface Movable {
    public void moveUp();
    public void moveDown();
    public  void moveLeft();
    public void moveRigth();

}


package p1;

public class MovablePoints implements Movable {
    int x, y, xSpeed, ySpeed;

    public MovablePoints(int x, int y, int xSpeed, int ySpeed) {
        this.x = x;
        this.y = y;
        this.xSpeed = xSpeed;
        this.ySpeed = ySpeed;
    }

    @Override
    public void moveUp() {
        y -= ySpeed;
    }

    @Override
    public void moveDown() {
        y += ySpeed;
    }

    @Override
    public void moveLeft() {
        x -= xSpeed;
    }

    @Override
    public void moveRigth() {
        x += xSpeed;

    }
    public String toString(){
        return "x= "+x+"  "+"y= "+y+"speed = ("+x+","+y+"}";
    }
}


package p1;
// the main test 2 class
public class Test_MovablePoints {
    public static void main(String[] args) {

       MovablePoints m1=new MovablePoints(12,40,23,11);

        System.out.println(m1);
        m1.moveDown();
        System.out.println(m1);
        m1.moveUp();
        System.out.println(m1);
        m1.moveLeft();
        System.out.println(m1);
        m1.moveRigth();
        System.out.println(m1);

    }
}

package p1;

abstract public class Shape {
    protected String color="red";
    protected Boolean filled=true;

    public Shape() {
    }

    public Shape(String color, Boolean filled) {
        this.color = color;
        this.filled = filled;
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    public void setFilled(Boolean filled) {
        this.filled = filled;
    }
    public boolean isFilled() {
        return false;
    }
    public abstract double getArea();
    public abstract double getPerimeter();
    public String toString(){
        return "Shape is "+"color="+color+"fille="+filled;
    }



}

package p1;

public class Circle extends Shape{
    protected double radius=1.0;

    public Circle() {
    }

    public Circle(double radius) {
        this.radius = radius;
    }

    public Circle(String color, Boolean filled, double radius) {
        super(color, filled);
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        this.radius = radius;
    }

    @Override
    public double getArea() {
        return 0;
    }

    @Override
    public double getPerimeter() {
        return 0;
    }

    @Override
    public String toString() {
       return " Circle{Shape: color="+color+"  Filled="+filled+"  radius="+radius+"}";
    }
}


package p1;

public class Rectangle extends Shape {
    protected  double width=1.0;
    protected double length=1.0;

    public Rectangle() {
    }

    public Rectangle(double width, double length) {
        this.width = width;
        this.length = length;
    }

    public Rectangle(String color, Boolean filled, double width, double length) {
        super(color, filled);
        this.width = width;
        this.length = length;
    }

    public double getWidth() {
        return width;
    }

    public double getLength() {
        return length;
    }

    public void setWidth(double width) {
        this.width = width;
    }

    public void setLength(double length) {
        this.length = length;
    }

    @Override
    public double getArea() {
        return 0;
    }

    @Override
    public double getPerimeter() {
        return 0;
    }

    @Override
    public String toString() {
        return " Rectangle {Shape: color="+color+"  Filled="+filled+"  width="+width+"  length="+length+"}";
    }
}

package p1;

public class Square extends Rectangle{
    public Square() {
    }
    public Square(double side) {
        super(side, side);  // Call superclass Rectangle(double, double)
    }
    public Square(String color, Boolean filled, double width, double length) {
        super(color, filled, width, length);
    }

    public double getSide(){
         return width;
    }
    public void setSide(double side){
        this.length=length;
        this.width=width;
    }

    @Override
    public void setWidth(double width) {
        super.setWidth(width);
    }

    @Override
    public void setLength(double length) {
        super.setLength(length);
    }

    @Override
    public String toString() {
        return " Square {Rectangle {Shape: color="+color+"  Filled="+filled+"  width="+width+"  length="+length+"}}";
    }
}


package p1;
//the main test  4 class
public class Test_Shape {
    public static void main(String[] args) {


        Circle c1 = new Circle("red", true, 1);  // Upcast Circle to Shape
        System.out.println(c1);


        Rectangle r1=new Rectangle("blue",false,3,4);
        System.out.println(r1);


        Square s1=new Square("green",true,4,3.3);
        System.out.println(s1);

    }
}
